#Merke: Eine Ini - Datei muss UTF-8 ohne BOM sein UND einen Zeilenumbruch am Ende haben

#############################################################
## Produktivsystem
#############################################################

[FGL!01]
;Verwendet in 'testPArameterByModuleAlias'
;200610121 verwendet in testParameterByProgramAlias. Hier wird nun der Parameter auch 'Ohne' die Systemnumber gesucht !
; alt, mit SystemnumberTestProgramName=FGL!01!TestProg
TestProgramName=TestProg
TestParameter1FromClass=TestValue1FromClass

####### Logkonfiguration ###################
KernelLogPath=c:\fglKernel\KernelLog
KernelLogFile=ZKernelLog_test.txt

######## Modulkonfigurationen ##############
;Modulkonfiguration:  Bei einem leeren Pfad wird im src-Ordner nachgesehen und ggfs eine leere Datei erzeugt.
;Daher in test entsprechenden Pfad angeben.

;FGL, weist auf das gleiche File
KernelConfigPathFGL=test
KernelConfigFileFGL=ZKernelConfigKernel_test.ini

;??? wird benoetigt ???
;KernelConfigPathKernel=test
;KernelConfigFileKernel=ZKernelConfigKernel_test.ini

;Konfiguration des Konfigurations-Moduls
KernelConfigPathConfig=test
KernelConfigFileConfig=ZKernelConfigConfig_test.ini

KernelConfigPathTestModule=test
KernelConfigFileTestModule=ZKernelConfigKernel_test.ini

;Modulkonfiguration: TESTMODULEXTERN, wichtig: Bei einem leeren Pfad wird der Modultest fehlschlagen, da im src-Ordner eine leere Modulkonfigurationsdatei erzeugt würde.
;Test für ein Modul in einer anderen Datei
KernelConfigPathTestModuleExtern=test
KernelConfigFileTestModuleExtern=ZKernelConfigKernelModulExtern_test.ini

;Modulkonfiguration per classennamen. Hat den Nachteil, dass die Konfiguration geaendert werden muss, wenn sich Pfad oder Klassenname aendern !!!
KernelConfigPathbasic.zKernel.KernelZZZTest=test
KernelConfigFilebasic.zKernel.KernelZZZTest=ZKernelConfigKernel_test.ini

KernelConfigPathbasic.zKernel.LogZZZTest=test
KernelConfigFilebasic.zKernel.LogZZZTest=ZKernelConfigKernel_test.ini

KernelConfigPathSectionNotExistTest=test
KernelConfigFileSectionNotExistTest=ZKernelConfigKernel_test.ini

;TODOGOON 20210203: Hier verkuerzt auch einen Aliaswerte anbieten fuer den Modulnamen
;KernelConfigPathuse.openvpn.serverui.component.IPExternalUpload.DlgIPExternalOVPN=<z:Null/>
;KernelConfigFileuse.openvpn.serverui.component.IPExternalUpload.DlgIPExternalOVPN=ZKernelConfig_OVPNServer.ini


####### Programmkonfigurationen ############
### Programmkonfigurationen statischer Name
#Finden der ....
;ProgConfigHandler=OVPN!01_Config

;[OVPN!01_Config] ; Fuer das Program ProgConfigHandler. Neu 20191218: Aus einem Fehler heraus geboren. Nun Kommentare und Leerzeichen hinter den Sections möglich.
;LocalMachineDirectoryRoot=
;LocalMachineDirectoryChildConfig=config

;Alle Konfigurationsdatein, die Verwendet werden sollen. Falls dies leer ist, werden alle Konfigurationsdateien verwendet, die gefunden werden.
;Mehrere Dateien werden mit dem Path-Separator voneinander getrennt.
;Zum Entwickeln auf dem Client einige Client-Konfigurationsfile verwenden.
;ConfigFile=server_TCP_443.ovpn\server_UDP_2403.ovpn


### Programmkonfiguration(en) (per Aliasnamen)
# Wenn in diesem File die Module definiert sind, dann koennen hier auch die einzelnen Programme der Module definiert werden.
# Merke:
# Ist das Program hier nicht definiert, wird der Wert geschrieben/erzeugt/gelesen in/aus dem entsprechenden SystemKey-Abschnitt
# D.h. man findet dann die Werte z.B. in [OVPN!01] statt in [IP_LocalContext]
# Definiert man dann das Programm und seinen Alias korrekt, muss man den Wert aus [OVPN!01] entfernen.
#
# Wurde das Program und sein Alias korrekt definiert, dann wird die Section fuer den Programalias automatisch erstellt, sofern sie noch nicht vorhanden ist.
#
#
# Merke:
# Jeder Test ist als eigenes Programm definiert. D.h. Er hat in dieser Datei eine eigene Section.
# Es ist moeglich Aliaswerte zu definieren (die dann in die Section kommen).
# Aber es reicht auch aus den Programnamen als Section zu verwenden.
# Schema: Klassenname oder Aliasname = Aliaswert


# Testprogramme, hier werden Aliasnamen definiert.
;Das ist ein feststehender Name, der verwendet werden muss, wenn der Context aus dieser Configuration geholt werden soll.
;Der Vorteil von Aliasnamen ist, das sie fuer mehrere 'Programme' verwendet werden koennen.
basic.zKernel.KernelZZZTest=TestProg

;Untenstehende Section soll nicht in der Datei existieren
SectionNotExistJUnitTest=TestProg4SectionNotExist

# Programme
;Das Panel selbst, z.B. um Vorbelegungen der Textfelder durchzufuehren beim Start
;use.openvpn.serverui.component.IPExternalUpload.PanelDlgIPExternalContentOVPN=IP_ServerContext
;Button zum Lesen des Werts aus dem WEB und Uebernahme ins UI
;use.openvpn.serverui.component.IPExternalUpload.ProgramIPContentWebOVPN=IP_ServerContext

;[IP_ServerContext]
;Ein Program, das ......
;Das ist die URL, in welcher ....
;URL2Read=file:///<Z>[ProgPageCreate]CreationDirectory</Z>\\<Z>[ProgPageCreate]CreationFile</Z>
;
;Ggf. zu verwendender Proxy
;ProxyHost=145.254.22.10

[TestModuleAliasExtern]
KernelConfigPathTestModuleAliasExtern=test
KernelConfigFileTestModuleAliasExtern=ZKernelConfigKernelModulExtern_test.ini


[TestProg]
;Section wird benoetigt fuer testParameterByProgramAlias'
;Der folgende wert soll auch gefunden werden
testGlobalProperty=testWert global
testProgramProperty4=testwert progname equals module1660337427878

;Verwendet in testGetParameterByModuleAlias... ist aber der Fehlerfall, d.h. explizit hier nicht vorhanden
testModuleProperty=TestModuleValue


;Test für: Wenn der Modulname und der Programname gleich sind, dann soll es moeglich sein ganz einfach nur den Programnamen und die gesuchte Property zu uebergeben
;Auserdem wird getestet, ob der spezielle f??ie SystemNumber konfigurierte Wert gefunden wird (Auch wenn nur der Klssenname ??geben wird)
TestParameter1Abbreviated=TestValue1Abbreviated SOLL NICHT GEFUNDEN WERDEN

;Der folgende Wert soll nicht gefunden werden. Es gibt im Suchpfad einen Wert vorher.
testProgramProperty4=testwert4 global 4 progname SOLL NICHT GEFUNDEN WERDEN

;Der folgende Wert soll gefunden werden. Es darf im Suchpfad keinen Wert vorher geben.
testProgramPropertyGlobal=testwert global 4 progname SOLL GEFUNDEN WERDEN

[FGL!01_TestProg]
;Section wird benoetigt fuer'testParameterByProgramAlias'
testProgramProperty2=testwert2 section
testProgramProperty3=testwert3 progname


;Test für: Wenn der Modulname und der Programname gleich sind, dann soll es moeglich sein ganz einfach nur den Programnamen und die gesuchte Property zu uebergeben
;Auserdem wird getestet, ob der spezielle fuer die SystemNumber konfigurierte Wert gefunden wird (Auch wenn nur der Klassenname uebergeben wird)
TestParameter1Abbreviated=TestValue1Abbreviated SOLL GEFUNDEN WERDEN

;Die folgenden Werte sollen auch gefunden werden, wenn nur nach einer Section mit dem 'reinen ' Programnamen gesucht wird.
testProgramProperty=testwert local 4 program

;Der folgende Wert wird gefunden mit diesen Suchwerten "TestModule", "testProgramName", "testProgramProperty"
testProgramProperty4=testwert4 local 4 program|Timestamp: 1720257746003

;Der folgende Wert soll gefunden werden. Er ist verschluesselt
;ROT13
;BACKUP fuer das TESTEN und UEBERSCHREIBEN testProgramPropertyEncryptedROT13=<Z><Z:Encrypted><Z:Cipher>ROT13</Z:Cipher><Z:Code>grfgjreg4qrpelcgrq ybpny 4 cebtenz</Z:Code></Z:Encrypted></Z>
testProgramPropertyEncryptedROT13=<Z><Z:Encrypted><Z:Cipher>ROT13</Z:Cipher><Z:Code>grfgjreg4qrpelcgrq ybpny 4 cebtenz</Z:Code></Z:Encrypted></Z>

;BACKUP fuer das TESTEN und UEBERSCHREIBEN Vigenere: <Z><Z:Encrypted><Z:Cipher>VigenereNn</Z:Cipher><z:KeyString>Hundi</z:KeyString><z:CharacterPool> abcdefghijklmnopqrstuvwxyz</z:CharacterPool><z:CharacterPoolAdditional>!</z:CharacterPoolAdditional><z:FlagControl>USEUPPERCASE,USENUMERIC,USELOWERCASE,USEADDITIONALCHARACTER</Z:FlagControl><Z:Code>8kBiFyIsAhNOD</Z:Code></Z:Encrypted></Z>
testProgramPropertyEncryptedVigenereNN=<Z><Z:Encrypted><Z:Cipher>VigenereNn</Z:Cipher><z:KeyString>Hundi</z:KeyString><z:CharacterPool> abcdefghijklmnopqrstuvwxyz</z:CharacterPool><z:CharacterPoolAdditional>!</z:CharacterPoolAdditional><z:FlagControl>USEUPPERCASE,USENUMERIC,USELOWERCASE,USEADDITIONALCHARACTER</Z:FlagControl><Z:Code>8kBiFyIsAhNOD</Z:Code></Z:Encrypted></Z>

testProgramProperty_old_ForEncryption=Zu verschluesselnder Wert


[TESTMODULE!01]
;Diese Section wird im 'testGetModuleAliasAll' erwartet. UND ZWAR GEFUELLT.
notleftempty=dummyvalue
testProgramProperty2=testwert section
testProgramProperty3=testwert progname

;Verwendet in testGetParameterByModuleAlias
testModuleProperty=TestModuleValue

[TEST!01]
### Application Test konfigurieren
#Produktivsystem
;Modulkonfiguration:  TEST

;Damit bei einem JUnit Test nicht immer alles in den Workspace geschreiben wird
KernelLogPath=c:\fglKernel\KernelLog
KernelLogFile=ZKernelLog_testTEST.txt


;KernelConfigPathTest=c:\fglKernel\KernelTest
KernelConfigPathTest=test
KernelConfigFileTest=ZKernelConfigKernel_test.ini

;Konfiguration eines Moduls, dessen Konfigurationsfile nicht existieren soll (s. JUnit Test)
KernelConfigPathNotExisting=c:\fglKernel\KernelTest
KernelConfigFileNotExisting=ZKernelConfigTestModuleNotExisting_test.ini

TestGetParameter=Test erfolgreich

;Erwartetes Ergebnis bei Entschluesselung: "Test erfolgreich!"
TestGetParameter_Encrypted=<Z><Z:Encrypted><Z:Cipher>VigenereNn</Z:Cipher><z:KeyString>Hundi</z:KeyString><z:CharacterPool> abcdefghijklmnopqrstuvwxyz</z:CharacterPool><z:CharacterPoolAdditional>!</z:CharacterPoolAdditional><z:FlagControl>USEUPPERCASE,USENUMERIC,USELOWERCASE,USEADDITIONALCHARACTER</Z:FlagControl><Z:Code>pzGxiMMtsuOMsmlPt</Z:Code></Z:Encrypted></Z>


[FGL!01_basic.zKernel.KernelZZZTest] ;Diese Section entspricht einem Programmnamen fuer einen bestimmten Systemkey
TestParameter2FromClass=TestValue2FromClass SOLL GEFUNDEN WERDEN

[basic.zKernel.KernelZZZTest] ;Diese Section entspricht einem Programmnamen ohne einen bestimmten Systemkey
;Merke: WENN EIN ALIAS GESETZT IST, DANN DARF HIER SICH NICHTS AENDERN
TestParameter2FromClass=TestValue2FromClass GLOBAL (sollte ueberschrieben worden sein)
TestParameterGlobal1FromClass=FürAlleSystemNumberGültig
testProgramProperty4=WENN EIN ALIAS GESETZT IST, DANN DARF HIER SICH NICHTS AENDERN


[basic.zKernel.LogZZZTest]
;20080106 Nun ist fuer ein Program ein spezielles Log definierbar
KernelLogPath=c:\fglKernel\KernelLog
KernelLogFile=ZKernelLog_LogZZZtest.txt

[testGetParameterHashMapStringByProgramAlias]
testValue01=<Z><JSON><JSON:MAP>{"UIText01":"TESTWERT2DO2JSON01","UIText02":"TESTWERT2DO2JSON02"}</JSON:MAP></JSON></Z>

[testGetParameterArrayByProgramAlias]
testValue01=<Z><JSON><JSON:ARRAY>[\"TESTWERT2DO2JSON01\",\"TESTWERT2DO2JSON02\"]</JSON:ARRAY></JSON></Z>


